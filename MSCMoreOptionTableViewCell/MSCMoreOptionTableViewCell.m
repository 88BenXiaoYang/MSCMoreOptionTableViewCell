//
//  MSCMoreOptionTableViewCell.m
//  MSCMoreOptionTableViewCell
//
//  Created by Manfred Scheiner (@scheinem) on 20.08.13.
//  Copyright (c) 2013 Manfred Scheiner (@scheinem). All rights reserved.
//

#import "MSCMoreOptionTableViewCell.h"

@interface MSCMoreOptionTableViewCell ()

@property (nonatomic, strong) UIButton *moreOptionButton;
@property (nonatomic, strong) UIScrollView *cellScrollView;

@end

@implementation MSCMoreOptionTableViewCell {

}

////////////////////////////////////////////////////////////////////////
#pragma mark - Life Cycle
////////////////////////////////////////////////////////////////////////

- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {
    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];
    if (self) {
        [self initFromCoderOrWithStyle];
    }
    return self;
}

- (id)initWithCoder:(NSCoder *)aDecoder {
    self = [super initWithCoder:aDecoder];
    if (self) {
        [self initFromCoderOrWithStyle];
    }
    return self;
}

- (void)initFromCoderOrWithStyle
{
    [self setupMoreOption];
}

- (void)setupMoreOption {
    _cellScrollView = [self findScrollView];
    [self observeCellScrollViewSublayers];
}

- (void)observeCellScrollViewSublayers
{
    [self.cellScrollView.layer addObserver:self forKeyPath:@"sublayers" options:NSKeyValueObservingOptionNew context:nil];
}

- (UIScrollView *)findScrollView
{
    /*
     * Look for UITableViewCell's scrollView.
     * Any CALayer found here can only be generated by UITableViewCell's
     * 'initWithStyle:reuseIdentifier:', so there is no way adding custom
     * sublayers before. This means custom sublayers are no problem and
     * don't break MSCMoreOptionTableViewCell's functionality.
    */

    for (CALayer *layer in self.layer.sublayers) {
        if ([layer.delegate isKindOfClass:[UIScrollView class]]) {
            return (UIScrollView *)layer.delegate;
        }
    }

    return nil;
}

- (void)dealloc {
    [self cleanupObservingCellScrollViewSublayers];
}

- (void)cleanupObservingCellScrollViewSublayers
{
    [self.cellScrollView.layer removeObserver:self forKeyPath:@"sublayers" context:nil];
}

////////////////////////////////////////////////////////////////////////
#pragma mark - NSObject(NSKeyValueObserving)
////////////////////////////////////////////////////////////////////////

- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {
    if ([keyPath isEqualToString:@"sublayers"]) {
        [self cellScrollViewLayerSublayersDidChange];
    }
}

- (void)cellScrollViewLayerSublayersDidChange
{
    NSLog(@"%@", NSStringFromSelector(_cmd));
    [self configureActionMenuButtonsIfNeeded];
}

- (void)configureActionMenuButtonsIfNeeded
{
    if (!self.moreOptionButton) {
        [self configureActionMenuButtonsIfAble];
    }else{
        // lifetime of the moreOptionButton is tied to the deleteConfirmationView.
        if (![self deleteConfirmationView]) {
            NSLog(@"More button configured, but the delete confirmation view is gone. Cleaning up.");
            self.moreOptionButton = nil;
        }
    }
}

- (void)configureActionMenuButtonsIfAble
{
    if ([self canConfigureActionMenuButtons]) {
        [self configureActionMenuButtons];
    }
}

- (BOOL)canConfigureActionMenuButtons
{
    return [self deleteConfirmationView] != nil;
}

// TableViewCellViewLocator (also layers)
- (UIView *)deleteConfirmationView
{
    CALayer *swipeToDeleteLayer = [self swipeToDeleteLayer];
    return swipeToDeleteLayer.delegate;
}

- (CALayer *)swipeToDeleteLayer
{
    CALayer *cellScrollViewLayer = _cellScrollView.layer;
    return [self findSwipeToDeleteLayerInScrollViewLayer:cellScrollViewLayer];
}

- (CALayer *)findSwipeToDeleteLayerInScrollViewLayer:(CALayer *)scrollViewLayer
{
    for (CALayer *layer in [scrollViewLayer sublayers]) {
        NSString *className = NSStringFromClass([layer.delegate class]);
        if ([className hasPrefix:@"UI"] && [className hasSuffix:@"ConfirmationView"]) {
            return layer;
        }
    }

    return nil;
}

- (void)configureActionMenuButtons
{
    [self configureDeleteButton];

    if ([self shouldDisplayMoreButton]) {
        [self initMoreButton];
    }
}


// TableViewCellViewLocator
- (UITableView *)tableView
{
    UIView *superview = self.superview;
    while(superview) {
        if([superview isKindOfClass:[UITableView class]]) {
            return (UITableView *)superview;
        }else{
            superview = superview.superview;
        }
    }

    return nil;
}

- (void)configureDeleteButton
{
    [self configureDeleteButtonBackgroundColorFromDelegate];
    [self configureDeleteButtonTitleColorFromDelegate];
}

- (void)configureDeleteButtonBackgroundColorFromDelegate
{
    UITableView *tableView = [self tableView];

    if ([self.delegate respondsToSelector:@selector(tableView:backgroundColorForDeleteConfirmationButtonForRowAtIndexPath:)]) {
            UIColor *deleteButtonColor = [self.delegate tableView:tableView backgroundColorForDeleteConfirmationButtonForRowAtIndexPath:[tableView indexPathForCell:self]];
            if (deleteButtonColor) {
                [self deleteConfirmationButton].backgroundColor = deleteButtonColor;
            }
    }
}

- (void)configureDeleteButtonTitleColorFromDelegate
{
    UITableView *tableView = [self tableView];

    if ([self.delegate respondsToSelector:@selector(tableView:titleColorForDeleteConfirmationButtonForRowAtIndexPath:)]) {
        UIColor *deleteButtonTitleColor = [self.delegate tableView:tableView titleColorForDeleteConfirmationButtonForRowAtIndexPath:[tableView indexPathForCell:self]];
        if (deleteButtonTitleColor) {
            [[self deleteButtonLabel] setTextColor:deleteButtonTitleColor];
        }
    }
}

// Locator
- (UILabel *)deleteButtonLabel
{
    for (UIView *view in [[self deleteConfirmationButton] subviews]) {
        if ([view isKindOfClass:[UILabel class]]) {
            return view;
        }
    }

    return nil;
}

- (void)initMoreButton
{
    self.moreOptionButton = [[UIButton alloc] initWithFrame:CGRectZero];
    [self.moreOptionButton addTarget:self action:@selector(moreOptionButtonPressed:) forControlEvents:UIControlEventTouchUpInside];
    self.moreOptionButton.titleLabel.numberOfLines = 0;
    self.moreOptionButton.titleLabel.textAlignment =  NSTextAlignmentCenter;

    [self setMoreButtonTitleFromDelegate];
    [self setMoreButtonTitleColorFromDelegate];
    [self setMoreButtonBackgroundColorFromDelegate];

    [self sizeThingsToFit];

    [[self deleteConfirmationView] addSubview:self.moreOptionButton];
}

- (void)setMoreButtonTitleFromDelegate
{
    [self.moreOptionButton setTitle:[self moreOptionButtonTitleFromDelegate] forState:UIControlStateNormal];
}

- (NSString *)moreOptionButtonTitleFromDelegate
{
    if ([self.delegate respondsToSelector:@selector(tableView:titleForMoreOptionButtonForRowAtIndexPath:)]) {
        UITableView *tableView = [self tableView];
        return [self.delegate tableView:tableView titleForMoreOptionButtonForRowAtIndexPath:[tableView indexPathForCell:self]];
    }

    return nil;
}

- (void)setMoreButtonTitleColorFromDelegate
{
    [self.moreOptionButton setTitleColor:[self moreButtonTitleColor] forState:UIControlStateNormal];
}

- (UIColor *)moreButtonTitleColor
{
    UIColor *titleColor = [self moreButtonTitleColorFromDelegate];
    if (titleColor) {
        return titleColor;
    }

    return [UIColor whiteColor];
}

- (UIColor *)moreButtonTitleColorFromDelegate
{
    UITableView *tableView = [self tableView];

    if ([self.delegate respondsToSelector:@selector(tableView:titleColorForMoreOptionButtonForRowAtIndexPath:)]) {
        return [self.delegate tableView:tableView titleColorForMoreOptionButtonForRowAtIndexPath:[tableView indexPathForCell:self]];
    }

    return nil;
}
- (void)setMoreButtonBackgroundColorFromDelegate
{


    [self.moreOptionButton setBackgroundColor:[self moreButtonBackgroundColor]];
}

- (UIColor *)moreButtonBackgroundColor
{
    UIColor *backgroundColor = [self moreButtonBackgroundColorFromDelegate];
    if (backgroundColor) {
        return backgroundColor;
    }

    return [UIColor lightGrayColor];
}

- (UIColor *)moreButtonBackgroundColorFromDelegate
{
    UITableView *tableView = [self tableView];

    if ([self.delegate respondsToSelector:@selector(tableView:backgroundColorForMoreOptionButtonForRowAtIndexPath:)]) {
        return [self.delegate tableView:tableView backgroundColorForMoreOptionButtonForRowAtIndexPath:[tableView indexPathForCell:self]];
    }

    return nil;
}

- (void)sizeThingsToFit
{
    CGFloat priorMoreOptionButtonFrameWidth = self.moreOptionButton.frame.size.width;
    CGFloat originalDeleteConfirmationViewWidth = [self deleteConfirmationView].frame.size.width - priorMoreOptionButtonFrameWidth;
    
    [self sizeMoreOptionButtonToFitText];
    [self sizeDeleteConfirmationViewToFitMoreButton:originalDeleteConfirmationViewWidth];
}

- (void)sizeMoreOptionButtonToFitText
{
    CGRect moreOptionButtonFrame = CGRectZero;

    moreOptionButtonFrame.size.width = [self moreOptionButtonWidth];
    moreOptionButtonFrame.size.height = [self moreOptionButtonHeight];

    self.moreOptionButton.frame = moreOptionButtonFrame;
}

- (CGFloat)moreOptionButtonWidth
{
    if ([[self delegate] respondsToSelector:@selector(tableView:widthForMoreOptionButtonForRowAtIndexPath:)]) {
        return [[self delegate] tableView:[self tableView] widthForMoreOptionButtonForRowAtIndexPath:[self indexPath]];
    }else{
        CGSize sizeThatFits = [self.moreOptionButton sizeThatFits:self.moreOptionButton.bounds.size];
        return sizeThatFits.width + 30.f;
    }
}

- (CGFloat)moreOptionButtonHeight
{
    UIButton *deleteConfirmationButton = [self deleteConfirmationButton];

    return deleteConfirmationButton.frame.size.height ? deleteConfirmationButton.frame.size.height : [self deleteConfirmationView].frame.size.height;
}

- (void)sizeDeleteConfirmationViewToFitMoreButton:(CGFloat)originalDeleteConfirmationViewWidth
{
    CGRect rect = [self deleteConfirmationView].frame;

    rect.size.width = CGRectGetMaxX(self.moreOptionButton.frame) + originalDeleteConfirmationViewWidth;
    rect.origin.x = [self deleteConfirmationView].superview.bounds.size.width - rect.size.width; // right align

    [self deleteConfirmationView].frame = rect;
}







- (NSIndexPath *)indexPath
{
    return [[self tableView] indexPathForCell:self];
}





- (BOOL)shouldDisplayMoreButton
{
    return [self moreOptionButtonTitleFromDelegate] != nil;
}



////////////////////////////////////////////////////////////////////////
#pragma mark - private methods
////////////////////////////////////////////////////////////////////////

- (UIButton *)deleteConfirmationButton
{
    for (UIButton *deleteConfirmationButton in [self deleteConfirmationView].subviews) {
        NSString *name = NSStringFromClass([deleteConfirmationButton class]);
        if ([name hasPrefix:@"UI"] && [name rangeOfString:@"Delete"].length > 0 && [name hasSuffix:@"Button"]) {
            return deleteConfirmationButton;
        }
    }
    return nil;
}

- (void)moreOptionButtonPressed:(id)sender {
    if ([self.delegate respondsToSelector:@selector(tableView:moreOptionButtonPressedInRowAtIndexPath:)]) {
        [self.delegate tableView:[self tableView] moreOptionButtonPressedInRowAtIndexPath:[[self tableView] indexPathForCell:self]];
    }
}

@end